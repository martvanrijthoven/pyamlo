{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PYAMLO Documentation","text":"<p>Development Status</p> <p>PYAMLO is currently in development. The API is not stable and may change without notice.</p> <p>PYAMLO is an advanced YAML configuration loader for Python that supports file inclusion, deep merging, environment variable injection, variable interpolation, and direct object instantiation.</p>"},{"location":"#why-pyamlo","title":"Why PYAMLO?","text":"<ul> <li>Composable configs: Use <code>include!</code> to merge multiple YAML files</li> <li>Powerful merging: Deep merge, extend lists, or patch dictionaries  </li> <li>Environment aware: Inject environment variables with defaults</li> <li>Python objects: Instantiate classes and functions directly from YAML</li> <li>Variable interpolation: Reference config values, combine strings, and access object properties with <code>${...}</code></li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install pyamlo\n</code></pre> <p>config.yaml: <pre><code>app:\n  name: MyWebApp\n  port: 8080\n  host: web.local\ngreeting: Hello, ${app.name}!\ndatabase_url: postgres://${app.host}:${app.port}/maindb\n</code></pre></p> <p>Python: <pre><code>from pyamlo import load_config\n\nconfig = load_config(\"config.yaml\")\nprint(config['greeting'])      # Hello, MyWebApp!\nprint(config['database_url'])  # postgres://web.local:8080/maindb\n</code></pre></p>"},{"location":"best-practices/","title":"Best Practices","text":""},{"location":"best-practices/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Use <code>!patch</code> only when you need to completely replace a dictionary</li> <li>Use <code>!extend</code> only on lists to append items</li> <li>Always provide defaults for non-critical environment variables</li> <li>Use <code>${...}</code> for referencing both config values and object attributes</li> </ul>"},{"location":"best-practices/#environment-variables","title":"Environment Variables","text":"<p>Always provide meaningful defaults: <pre><code>db_url: !env {var: DATABASE_URL, default: \"sqlite:///default.db\"}\nlog_level: !env {var: LOG_LEVEL, default: \"INFO\"}\n</code></pre></p>"},{"location":"best-practices/#cli-overrides","title":"CLI Overrides","text":""},{"location":"best-practices/#namespace-your-arguments","title":"Namespace Your Arguments","text":"<p>Always use the <code>pyamlo.</code> prefix to avoid conflicts: <pre><code># Good\npython script.py pyamlo.app.name=MyApp --verbose\n\n# Bad - will be ignored\npython script.py app.name=MyApp --verbose\n</code></pre></p>"},{"location":"best-practices/#use-proper-yaml-syntax","title":"Use Proper YAML Syntax","text":"<p>Quote complex values and use valid YAML: <pre><code># Good\npython script.py 'pyamlo.items=!extend [4,5]' 'pyamlo.settings=!patch {\"debug\": true}'\n\n# Bad - invalid syntax\npython script.py pyamlo.items=!extend[4,5] pyamlo.settings=!patch{debug:true}\n</code></pre></p>"},{"location":"best-practices/#programmatic-vs-command-line-usage","title":"Programmatic vs Command Line Usage","text":"<p>Programmatic overrides: <pre><code>from pyamlo import load_config\n\n# Manual overrides for specific values\nconfig = load_config(\"config.yml\", overrides=[\n    \"pyamlo.app.debug=true\",\n    \"pyamlo.database.host=localhost\"\n])\n\n# Automatic CLI reading\nconfig = load_config(\"config.yml\", use_cli=True)\n\n# Combined approach\nconfig = load_config(\"config.yml\", \n    overrides=[\"pyamlo.app.name=MyApp\"],  # Always applied\n    use_cli=True  # Read additional overrides from command line\n)\n</code></pre></p> <p>Command line usage: <pre><code>python -m pyamlo config.yml pyamlo.app.debug=true pyamlo.database.host=localhost\n</code></pre></p>"},{"location":"best-practices/#processing-order","title":"Processing Order","text":"<ol> <li>File includes (<code>!include</code> directives)</li> <li>Config file values (loaded from YAML files)</li> <li>Manual overrides (via <code>overrides</code> parameter)</li> <li>CLI overrides (when <code>use_cli=True</code>)</li> </ol> <p>Manual and CLI overrides can be combined, with CLI overrides taking final precedence.</p>"},{"location":"features/","title":"Features","text":"<p>PYAMLO extends standard YAML with powerful features for complex configurations, making it perfect for machine learning, data pipelines, and application configuration management.</p>"},{"location":"features/#quick-reference","title":"Quick Reference","text":""},{"location":"features/#special-tags","title":"Special Tags","text":"Syntax Purpose Example <code>include!</code> Include &amp; merge files <code>include!: [base.yml, env.yml]</code> <code>!include</code> Include single file at key <code>config: !include config.yml</code> <code>!include_from</code> Include key from config <code>config: !include_from config.yml</code> <code>!@</code> Instantiate Python objects <code>!@datetime.datetime 2023 1 1</code> <code>!@$</code> Dynamic object creation <code>!@collections.$counter_type</code> or <code>!@$target_class</code> <code>!import</code> Import Python modules <code>!import datetime.datetime</code> <code>!env</code> Environment variables <code>!env {var: API_KEY, default: none}</code> <code>!extend</code> Extend existing lists <code>items: !extend [4, 5, 6]</code> <code>!patch</code> Replace dictionaries <code>config: !patch {debug: true}</code>"},{"location":"features/#variable-expressions","title":"Variable Expressions (<code>${...}</code>)","text":"Type Operators Example References <code>.</code> access <code>${app.name} v${app.version}</code> Math <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>//</code> <code>%</code> <code>**</code> <code>${workers * 2 + 1}</code> Bitwise <code>&amp;</code> <code>\\|</code> <code>^</code> <code>~</code> <code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>${flags \\| permissions}</code> Comparison <code>==</code> <code>!=</code> <code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> <code>in</code> <code>${env == 'production'}</code> Logical <code>and</code> <code>or</code> <code>not</code> <code>${debug and verbose}</code> Conditional <code>if-else</code> <code>${50 if prod else 10}</code>"},{"location":"features/#cli-overrides","title":"CLI Overrides","text":"<p>Override any configuration value from the command line using <code>pyamlo.</code> prefix:</p> <pre><code># Basic overrides\npython -m pyamlo config.yml pyamlo.app.name=MyApp pyamlo.debug=true\n\n# Multiple files with overrides\npython -m pyamlo base.yml prod.yml pyamlo.database.pool_size=20\n\n# Special tags in overrides\npython -m pyamlo config.yml 'pyamlo.items=!extend [4,5]' 'pyamlo.settings=!patch {\"debug\": true}'\n</code></pre>"},{"location":"features/#programmatic-usage","title":"Programmatic Usage","text":"<p>Control configuration loading in Python:</p> <pre><code>from pyamlo import load_config\n\n# Manual overrides\nconfig = load_config(\"config.yml\", overrides=[\"pyamlo.app.name=MyApp\"])\n\n# Automatic CLI reading\nconfig = load_config(\"config.yml\", use_cli=True)\n\n# Combined approach\nconfig = load_config(\"config.yml\", \n    overrides=[\"pyamlo.app.name=MyApp\"],  # Manual overrides\n    use_cli=True                         # Also read from sys.argv\n)\n</code></pre>"},{"location":"features/#processing-order","title":"Processing Order","text":"<p>Configuration values are processed in this order (later overrides earlier):</p> <ol> <li>Include processing (per file)</li> <li>Config file merging (left to right)</li> <li>Manual overrides (via <code>overrides</code> parameter)</li> <li>CLI overrides (via <code>use_cli=True</code>)</li> <li>Variable resolution and object instantiation</li> </ol>"},{"location":"ignite/","title":"PyTorch Ignite Integration Guide","text":"<p>PYAMLO makes PyTorch Ignite configurations modular and reusable. This guide shows a complete MNIST CNN example using the selector pattern.</p>"},{"location":"ignite/#complete-example","title":"Complete Example","text":"<p>run_modular.yml <pre><code># Configuration selection\ndataset_name: mnist\nmodel_name: cnn\n\n# Load modular components\ninclude!:\n  - ./devices/auto.yml \n  - ./datasets/selector.yml\n  - ./models/selector.yml\n  - ./trainers/selector.yml\n  - ./evaluators/selector.yml\n\n# Training settings\nepochs: 1\n\n# Train model\ntrain_result: !@$trainer.run\n  start_msg: \"Starting training...\"\n  finish_msg: \"Training completed!\"\n  data: ${train_loader}\n  max_epochs: ${epochs}\n\n# Evaluate model\neval_result: !@$evaluator.run\n  start_msg: \"Running evaluation...\"\n  finish_msg: \"Evaluation completed!\"\n  data: ${val_loader}\n\n# Display results\nresults_msg: !@pprint.pprint ${evaluator.state.metrics}\n</code></pre></p>"},{"location":"ignite/#components","title":"Components","text":"<p>devices/auto.yml <pre><code>cuda: !@torch.cuda.is_available\ndevice: !@torch.device\n  type: \"${'cuda' if cuda else 'cpu'}\"\n</code></pre></p> <p>datasets/selector.yml <pre><code>dataset_name: mnist\ntrain_dataset, val_dataset: !include_from ./${dataset_name}.yml\n\ntrain_loader: !@torch.utils.data.DataLoader\n  dataset: ${train_dataset}\n  batch_size: 64\n  shuffle: true\n\nval_loader: !@torch.utils.data.DataLoader\n  dataset: ${val_dataset}\n  batch_size: 64\n  shuffle: false\n</code></pre></p> <p>datasets/mnist.yml <pre><code>transform: !@torchvision.transforms.Compose\n  transforms:\n    - !@torchvision.transforms.ToTensor\n    - !@torchvision.transforms.Normalize\n      mean: [0.1307]\n      std: [0.3081]\n\ntrain_dataset: !@torchvision.datasets.MNIST\n  root: \"./data\"\n  train: true\n  download: true\n  transform: ${transform}\n\nval_dataset: !@torchvision.datasets.MNIST\n  root: \"./data\"\n  train: false\n  download: true\n  transform: ${transform}\n</code></pre></p> <p>models/selector.yml <pre><code>model_name: cnn\nmodel: !include_from ./${model_name}.yml\nmodel: !@$model.to ${device}\n</code></pre></p> <p>models/cnn.yml <pre><code>model: !@torch.nn.Sequential\n  - !@torch.nn.Conv2d\n    in_channels: 1\n    out_channels: 32\n    kernel_size: 3\n    padding: 1\n  - !@torch.nn.ReLU\n  - !@torch.nn.MaxPool2d\n    kernel_size: 2\n  - !@torch.nn.Conv2d\n    in_channels: 32\n    out_channels: 64\n    kernel_size: 3\n    padding: 1\n  - !@torch.nn.ReLU\n  - !@torch.nn.MaxPool2d\n    kernel_size: 2\n  - !@torch.nn.Flatten\n  - !@torch.nn.Linear\n    in_features: 3136\n    out_features: 128\n  - !@torch.nn.ReLU\n  - !@torch.nn.Dropout\n    p: 0.5\n  - !@torch.nn.Linear\n    in_features: 128\n    out_features: 10\n</code></pre></p> <p>trainers/selector.yml <pre><code>lr: 0.001\noptimizer: !@torch.optim.Adam\n  params: !@$model.parameters\n  lr: ${lr}\n\nloss_fn: !@torch.nn.CrossEntropyLoss\n\ntrainer: !@ignite.engine.create_supervised_trainer\n  model: ${model}\n  optimizer: ${optimizer}\n  loss_fn: ${loss_fn}\n  device: ${device}\n</code></pre></p> <p>evaluators/selector.yml <pre><code>evaluator: !@ignite.engine.create_supervised_evaluator\n  model: ${model}\n  metrics:\n    accuracy: !@ignite.metrics.Accuracy\n    loss: !@ignite.metrics.Loss ${loss_fn}\n  device: ${device}\n</code></pre></p>"},{"location":"ignite/#running","title":"Running","text":"<pre><code>cd examples/ignite\n\n# Basic training\npython -m pyamlo run_modular.yml\n\n# With overrides\npython -m pyamlo run_modular.yml pyamlo.model_name=resnet pyamlo.lr=0.01\n</code></pre>"},{"location":"keras/","title":"Keras/Tensorflow Integration Guide","text":"<p>PYAMLO makes Keras/TensorFlow configurations modular and reusable. This guide shows a complete MNIST CNN example.</p>"},{"location":"keras/#complete-example","title":"Complete Example","text":"<p>train.yml <pre><code># Configuration selection\ndataset_name: mnist\nmodel_name: cnn\noptimizer_name: adam\n\n# Load modular components\ndataset: !include_from datasets/${dataset_name}.yml\nmodel: !include_from models/${model_name}.yml\n\n# Training settings\nbatch_size: 32\nepochs: 1\nvalidation_split: 0.1\n\n# Compile and train\ncompile_step: !@$model.compile\n  optimizer: ${optimizer_name}\n  loss: \"sparse_categorical_crossentropy\"\n  metrics: [\"accuracy\"]\n\nhistory: !@$model.fit\n  x: ${dataset.x_train}\n  y: ${dataset.y_train}\n  batch_size: ${batch_size}\n  epochs: ${epochs}\n  validation_split: ${validation_split}\n  verbose: 1\n\ntest_results: !@$model.evaluate\n  x: ${dataset.x_test}\n  y: ${dataset.y_test}\n  verbose: 0\n</code></pre></p>"},{"location":"keras/#components","title":"Components","text":"<p>datasets/mnist.yml <pre><code>dataset: !@keras_utils.MNISTDataset\n</code></pre></p> <p>models/cnn.yml <pre><code>model: !@tensorflow.keras.Sequential\n  layers:\n    - !@tensorflow.keras.layers.Conv2D\n        filters: 32\n        kernel_size: [3, 3]\n        activation: \"relu\"\n        input_shape: ${dataset.input_shape}\n    - !@tensorflow.keras.layers.MaxPooling2D\n        pool_size: [2, 2]\n    - !@tensorflow.keras.layers.Conv2D\n        filters: 64\n        kernel_size: [3, 3]\n        activation: \"relu\"\n    - !@tensorflow.keras.layers.MaxPooling2D\n        pool_size: [2, 2]\n    - !@tensorflow.keras.layers.Conv2D\n        filters: 64\n        kernel_size: [3, 3]\n        activation: \"relu\"\n    - !@tensorflow.keras.layers.Flatten\n    - !@tensorflow.keras.layers.Dense\n        units: 64\n        activation: \"relu\"\n    - !@tensorflow.keras.layers.Dropout\n        rate: 0.5\n    - !@tensorflow.keras.layers.Dense\n        units: ${dataset.num_classes}\n        activation: \"softmax\"\n</code></pre></p> <p>keras_utils.py <pre><code>import tensorflow as tf\n\nclass MNISTDataset:\n    def __init__(self):\n        (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n        self.x_train = tf.cast(x_train, tf.float32) / 255.0\n        self.x_test = tf.cast(x_test, tf.float32) / 255.0\n\n        self.x_train = tf.expand_dims(self.x_train, axis=-1)\n        self.x_test = tf.expand_dims(self.x_test, axis=-1)\n\n        self.y_train = tf.cast(y_train, tf.int32)\n        self.y_test = tf.cast(y_test, tf.int32)\n\n        self.num_classes = 10\n        self.input_shape = (28, 28, 1)\n</code></pre></p>"},{"location":"keras/#running","title":"Running","text":"<pre><code>cd examples/keras\nPYTHONPATH=. python -m pyamlo train.yml\n</code></pre>"},{"location":"lightning/","title":"PyTorch Lightning Integration Guide","text":"<p>PYAMLO makes PyTorch Lightning configurations modular and reusable. This guide shows a complete MNIST MobileNetV2 example.</p>"},{"location":"lightning/#complete-example","title":"Complete Example","text":"<p>train.yml <pre><code># Configuration selection\ndataset: mnist\nmodel_name: mobilenet\n\n# Load modular components\nmodel: !include_from ${model_name}.yml\ndataset: !include_from ${dataset}.yml\n\n# DataLoaders\ntrain_loader: !@torch.utils.data.DataLoader\n  dataset: ${dataset.train_dataset}\n  batch_size: 64\n  shuffle: true\n\nval_loader: !@torch.utils.data.DataLoader\n  dataset: ${dataset.val_dataset}\n  batch_size: 64\n  shuffle: false\n\n# Lightning model wrapper\nlightning_model: !@simple_cnn.LightningModel\n  model: ${model}\n  lr: 0.001\n\n# Lightning trainer\ntrainer: !@lightning.pytorch.Trainer\n  max_epochs: 1\n  accelerator: \"auto\"\n  devices: 1\n\n# Start training\ntrain: !@$trainer.fit\n  model: ${lightning_model}\n  train_dataloaders: ${train_loader}\n  val_dataloaders: ${val_loader}\n</code></pre></p>"},{"location":"lightning/#components","title":"Components","text":"<p>mnist.yml <pre><code># MNIST transforms\n_mnist:\n  _transform: !@torchvision.transforms.Compose\n    transforms:\n      - !@torchvision.transforms.ToTensor\n      - !@torchvision.transforms.Normalize\n        mean: [0.1307]\n        std: [0.3081]\n\n# Datasets\ntrain_dataset: !@torchvision.datasets.MNIST\n  root: \"./data\"\n  train: true\n  download: true\n  transform: ${_mnist._transform}\n\nval_dataset: !@torchvision.datasets.MNIST\n  root: \"./data\"\n  train: false\n  download: true\n  transform: ${_mnist._transform}\n</code></pre></p> <p>mobilenet.yml <pre><code>model: !@torchvision.models.mobilenet_v2\n  num_classes: 10\n</code></pre></p> <p>simple_cnn.py <pre><code>import lightning.pytorch as pl\nimport torch\nimport torch.nn.functional as F\nimport torchmetrics\n\nclass LightningModel(pl.LightningModule):\n    def __init__(self, model, lr=0.001):\n        super().__init__()\n        self.model = model\n        self.lr = lr\n        self.accuracy = torchmetrics.Accuracy(task='multiclass', num_classes=10)\n\n        # Modify first layer for MNIST (1 channel input)\n        if hasattr(model, 'features') and hasattr(model.features[0], 'in_channels'):\n            if model.features[0].in_channels == 3:\n                model.features[0] = torch.nn.Conv2d(1, model.features[0].out_channels, \n                                                   kernel_size=model.features[0].kernel_size,\n                                                   stride=model.features[0].stride,\n                                                   padding=model.features[0].padding,\n                                                   bias=model.features[0].bias is not None)\n\n    def forward(self, x):\n        return self.model(x)\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.cross_entropy(logits, y)\n        acc = self.accuracy(logits, y)\n        self.log('train_loss', loss, prog_bar=True)\n        self.log('train_acc', acc, prog_bar=True)\n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.cross_entropy(logits, y)\n        acc = self.accuracy(logits, y)\n        self.log('val_loss', loss, prog_bar=True)\n        self.log('val_acc', acc, prog_bar=True)\n        return loss\n\n    def configure_optimizers(self):\n        return torch.optim.Adam(self.parameters(), lr=self.lr)\n</code></pre></p>"},{"location":"lightning/#running","title":"Running","text":"<pre><code>cd examples/lightning\n\n# Basic training\nPYTHONPATH=. python -m pyamlo train.yml\n\n# With overrides\nPYTHONPATH=. python -m pyamlo train.yml pyamlo.lr=0.01 pyamlo.trainer.max_epochs=5\n</code></pre>"},{"location":"security/","title":"Security","text":"<p>PYAMLO provides a comprehensive security system to control access to system resources and protect against potentially dangerous operations. The security system is designed to be both powerful and easy to use, with sensible defaults for different use cases.</p>"},{"location":"security/#overview","title":"Overview","text":"<p>The <code>SecurityPolicy</code> class controls four main areas:</p> <ul> <li>Environment Variables: Access to <code>!env</code> tags</li> <li>Module Imports: Python object instantiation with <code>!@</code> and <code>!$@</code> tags  </li> <li>File Includes: File system access via <code>include!</code>, <code>!include</code>, and <code>!include_from</code></li> <li>Expression Evaluation: Mathematical and logical expressions in <code>${...}</code></li> </ul>"},{"location":"security/#quick-start","title":"Quick Start","text":""},{"location":"security/#restrictive-mode-default","title":"Restrictive Mode (Default)","text":"<p>By default, PYAMLO operates in restrictive mode where everything is denied unless explicitly allowed:</p> <pre><code>from pyamlo import load_config\nfrom pyamlo.security import SecurityPolicy\n\n# Create restrictive policy\npolicy = SecurityPolicy()\npolicy.allowed_imports.add(\"pathlib.Path\")\npolicy.allowed_env_vars.add(\"API_KEY\")\npolicy.allowed_include_paths.add(\"/safe/configs/*.yml\")\n\nconfig = load_config(\"config.yml\", security_policy=policy)\n</code></pre>"},{"location":"security/#permissive-mode","title":"Permissive Mode","text":"<p>In permissive mode, everything is allowed except what's explicitly blocked:</p> <pre><code># Create permissive policy\npolicy = SecurityPolicy(restrictive=False)\npolicy.allowed_imports = {\"os.system\", \"subprocess.*\"}  # Block dangerous modules\npolicy.allowed_env_vars = {\"PASSWORD\"}  # Block sensitive env vars\n\nconfig = load_config(\"config.yml\", security_policy=policy)\n</code></pre>"},{"location":"security/#environment-variables","title":"Environment Variables","text":"<p>Control access to environment variables via the <code>!env</code> tag.</p>"},{"location":"security/#restrictive-mode","title":"Restrictive Mode","text":"<p>Only explicitly allowed environment variables can be accessed:</p> <pre><code>policy = SecurityPolicy()\npolicy.allowed_env_vars.add(\"API_KEY\")\npolicy.allowed_env_vars.add(\"DATABASE_URL\") \n</code></pre> <p>config.yml <pre><code># \u2705 Allowed\napi_key: !env API_KEY\ndb_url: !env DATABASE_URL\n\n# \u274c Denied - PermissionError\nsecret: !env SECRET_TOKEN\n</code></pre></p>"},{"location":"security/#permissive-mode_1","title":"Permissive Mode","text":"<p>All environment variables are accessible unless blocked:</p> <pre><code>policy = SecurityPolicy(restrictive=False)\npolicy.allowed_env_vars = {\"SECRET_TOKEN\", \"PASSWORD\"}  # Block these\n</code></pre>"},{"location":"security/#module-imports","title":"Module Imports","text":"<p>Control Python object instantiation and module imports.</p>"},{"location":"security/#basic-usage","title":"Basic Usage","text":"<pre><code>policy = SecurityPolicy()\npolicy.allowed_imports.add(\"pathlib.Path\")\npolicy.allowed_imports.add(\"collections.Counter\")\n</code></pre> <p>config.yml <pre><code># \u2705 Allowed\npath: !@pathlib.Path /tmp/data\ncounter: !@collections.Counter [1, 2, 3, 3]\n\n# \u274c Denied - PermissionError  \nprocess: !@subprocess.Popen [\"ls\"]\n</code></pre></p>"},{"location":"security/#wildcard-patterns","title":"Wildcard Patterns","text":"<p>Use wildcards to allow entire modules or namespaces:</p> <pre><code>policy = SecurityPolicy()\npolicy.allowed_imports.add(\"collections.*\")      # All collections modules\npolicy.allowed_imports.add(\"torch.nn.*\")         # All PyTorch neural network modules\npolicy.allowed_imports.add(\"pathlib.?ath\")       # Path or similar (? = single char)\npolicy.allowed_imports.add(\"numpy.*\")            # All numpy modules\n</code></pre> <p>config.yml <pre><code># \u2705 All allowed due to wildcards\ncounter: !@collections.Counter [1, 2, 3]\ndeque: !@collections.deque [4, 5, 6]\nlinear: !@torch.nn.Linear\n  in_features: 10\n  out_features: 5\nconv: !@torch.nn.Conv2d\n  in_channels: 3\n  out_channels: 64\n  kernel_size: 3\npath: !@pathlib.Path /data\npure_path: !@pathlib.PurePath /other\narray: !@numpy.array [1, 2, 3]\nzeros: !@numpy.zeros [5, 5]\n</code></pre></p>"},{"location":"security/#character-classes","title":"Character Classes","text":"<p>Use bracket notation for more precise control:</p> <pre><code>policy.allowed_imports.add(\"[cp]*.*\")  # Modules starting with 'c' or 'p'\n</code></pre>"},{"location":"security/#dynamic-object-creation","title":"Dynamic Object Creation","text":"<p>Control <code>!$@</code> (interpolated) object creation:</p> <pre><code>policy = SecurityPolicy()\npolicy.allowed_imports.add(\"collections.*\")\npolicy.allow_expressions = True  # Needed for variable resolution\n</code></pre> <p>config.yml <pre><code>container_type: Counter\ndata: !@collections.$container_type [1, 1, 2, 3]\n\n# Or with full interpolation\ntarget_class: collections.Counter\ndata2: !@$target_class [4, 5, 6]\n</code></pre></p>"},{"location":"security/#file-includes","title":"File Includes","text":"<p>Control file system access for configuration includes.</p>"},{"location":"security/#path-restrictions","title":"Path Restrictions","text":"<pre><code>policy = SecurityPolicy()\npolicy.allowed_include_paths.add(\"/app/configs/*.yml\")\npolicy.allowed_include_paths.add(\"/app/templates/**/*.yaml\")\n</code></pre> <p>config.yml <pre><code># \u2705 Allowed\nbase: !include /app/configs/base.yml\ndatabase: !include_from /app/configs/database.yml\n\ninclude!:\n  - /app/templates/api/routes.yaml\n\n# \u274c Denied - outside allowed paths\nsecrets: !include /etc/secrets.yml\n</code></pre></p>"},{"location":"security/#wildcard-patterns-for-includes","title":"Wildcard Patterns for Includes","text":"<pre><code>policy = SecurityPolicy()\npolicy.allowed_include_paths.add(\"configs/*.yml\")         # Direct children\npolicy.allowed_include_paths.add(\"configs/**/*.yml\")      # All descendants  \npolicy.allowed_include_paths.add(\"templates/[abc]*.yml\")  # Files starting with a, b, or c\npolicy.allowed_include_paths.add(\"env/???.yml\")           # Exactly 3-character names\n</code></pre>"},{"location":"security/#relative-vs-absolute-paths","title":"Relative vs Absolute Paths","text":"<p>The security system works with resolved absolute paths, so patterns should account for the full path:</p> <pre><code>import os\nbase_dir = os.path.abspath(\".\")\npolicy.allowed_include_paths.add(f\"{base_dir}/configs/*.yml\")\n</code></pre>"},{"location":"security/#expression-evaluation","title":"Expression Evaluation","text":"<p>Control mathematical and logical expressions in <code>${...}</code> syntax.</p>"},{"location":"security/#restrictive-mode-default_1","title":"Restrictive Mode (Default)","text":"<p>Expressions are disabled by default in restrictive mode:</p> <pre><code>policy = SecurityPolicy()  # restrictive=True by default\n# policy.allow_expressions = False (implicit)\n</code></pre> <p>config.yml <pre><code># \u274c All denied - PermissionError\nport: ${8000 + 100}\ndebug: ${env == 'development'}\nworkers: ${cpu_count * 2}\n</code></pre></p>"},{"location":"security/#enabling-expressions","title":"Enabling Expressions","text":"<pre><code>policy = SecurityPolicy()\npolicy.allow_expressions = True\n</code></pre> <p>config.yml <pre><code># \u2705 All allowed\nbase_port: 8000\nport: ${base_port + 100}\nenv: development  \ndebug: ${env == 'development'}\ncpu_count: 4\nworkers: ${cpu_count * 2}\ndatabase_url: postgresql://localhost:${port}/mydb\n</code></pre></p>"},{"location":"security/#permissive-mode_2","title":"Permissive Mode","text":"<p>Expressions are enabled by default in permissive mode:</p> <pre><code>policy = SecurityPolicy(restrictive=False)\n# policy.allow_expressions = True (implicit)\n</code></pre>"},{"location":"security/#complete-examples","title":"Complete Examples","text":""},{"location":"security/#machine-learning-pipeline","title":"Machine Learning Pipeline","text":"<pre><code>from pyamlo.security import SecurityPolicy\n\n# Allow ML libraries and common utilities\npolicy = SecurityPolicy()\npolicy.allowed_imports.update([\n    \"torch.*\", \"torch.nn.*\", \"torch.optim.*\",\n    \"sklearn.*\", \"numpy.*\", \"pandas.*\",\n    \"pathlib.Path\", \"collections.*\"\n])\npolicy.allowed_env_vars.update([\n    \"CUDA_VISIBLE_DEVICES\", \"WANDB_API_KEY\", \n    \"DATA_DIR\", \"MODEL_DIR\"\n])\npolicy.allowed_include_paths.add(\"configs/**/*.yml\")\npolicy.allow_expressions = True\n\nconfig = load_config(\"ml_config.yml\", security_policy=policy)\n</code></pre> <p>ml_config.yml <pre><code># Environment and paths\ndata_dir: !env {var: DATA_DIR, default: \"./data\"}\nmodel_dir: !env {var: MODEL_DIR, default: \"./models\"}\ndevice: !env {var: CUDA_VISIBLE_DEVICES, default: \"cpu\"}\n\n# Model configuration\nmodel: !@torch.nn.Sequential\n  - !@torch.nn.Linear\n    in_features: 784\n    out_features: 128\n  - !@torch.nn.ReLU\n  - !@torch.nn.Linear  \n    in_features: 128\n    out_features: 10\n\n# Training settings\nbatch_size: 32\nlearning_rate: 0.001\nepochs: ${50 if device != \"cpu\" else 10}\n\noptimizer: !@torch.optim.Adam\n  params: ${model.parameters()}\n  lr: ${learning_rate}\n\n# Data loading\ntrain_data: !@torch.utils.data.DataLoader\n  dataset: ${dataset}\n  batch_size: ${batch_size}\n  shuffle: true\n</code></pre></p>"},{"location":"security/#web-application","title":"Web Application","text":"<pre><code># Secure web app configuration\npolicy = SecurityPolicy()\npolicy.allowed_imports.update([\n    \"pathlib.Path\", \"datetime.datetime\",\n    \"logging.*\", \"collections.*\"\n])\npolicy.allowed_env_vars.update([\n    \"DATABASE_URL\", \"SECRET_KEY\", \"REDIS_URL\", \n    \"API_HOST\", \"API_PORT\", \"DEBUG\"\n])\npolicy.allowed_include_paths.update([\n    \"configs/*.yml\", \"environments/*.yml\"\n])\npolicy.allow_expressions = True\n\nconfig = load_config(\"app_config.yml\", security_policy=policy)\n</code></pre> <p>app_config.yml <pre><code># Base configuration\ninclude!:\n  - configs/database.yml\n  - configs/logging.yml\n\n# Environment-specific\nenv: !env {var: ENVIRONMENT, default: \"development\"}\ndebug: !env {var: DEBUG, default: \"false\"}\n\n# Server settings\nhost: !env {var: API_HOST, default: \"localhost\"}\nport: !env {var: API_PORT, default: \"8000\"}\nworkers: ${4 if env == \"production\" else 1}\n\n# Security\nsecret_key: !env SECRET_KEY\nsession_timeout: ${3600 if env == \"production\" else 300}\n\n# Database\ndatabase_url: !env DATABASE_URL\npool_size: ${20 if env == \"production\" else 5}\n\n# Logging\nlog_level: ${{\"production\": \"INFO\", \"staging\": \"DEBUG\"}.get(env, \"DEBUG\")}\nlog_file: !@pathlib.Path\n  - logs\n  - ${env}.log\n</code></pre></p>"},{"location":"security/#development-vs-production","title":"Development vs Production","text":"<pre><code>def create_dev_policy():\n    \"\"\"Permissive policy for development\"\"\"\n    policy = SecurityPolicy(restrictive=False)\n    # Block only dangerous operations\n    policy.allowed_imports = {\"os.system\", \"subprocess.*\", \"eval\", \"exec\"}\n    return policy\n\ndef create_prod_policy():\n    \"\"\"Restrictive policy for production\"\"\"\n    policy = SecurityPolicy(restrictive=True)\n    # Allow only specific, safe operations\n    policy.allowed_imports.update([\n        \"pathlib.Path\", \"datetime.*\", \"json.*\",\n        \"logging.*\", \"collections.*\"\n    ])\n    policy.allowed_env_vars.update([\n        \"DATABASE_URL\", \"API_KEY\", \"LOG_LEVEL\"\n    ])\n    policy.allowed_include_paths.add(\"/app/configs/*.yml\")\n    policy.allow_expressions = True\n    return policy\n\n# Use based on environment\nimport os\nif os.getenv(\"ENVIRONMENT\") == \"production\":\n    policy = create_prod_policy()\nelse:\n    policy = create_dev_policy()\n\nconfig = load_config(\"config.yml\", security_policy=policy)\n</code></pre>"},{"location":"security/#common-patterns","title":"Common Patterns","text":""},{"location":"security/#safe-scientific-computing","title":"Safe Scientific Computing","text":"<pre><code>policy = SecurityPolicy()\npolicy.allowed_imports.update([\n    \"numpy.*\", \"scipy.*\", \"pandas.*\", \"matplotlib.*\",\n    \"sklearn.*\", \"torch.*\", \"tensorflow.*\",\n    \"pathlib.Path\", \"datetime.*\", \"collections.*\"\n])\npolicy.allowed_env_vars.update([\n    \"DATA_PATH\", \"OUTPUT_PATH\", \"CUDA_VISIBLE_DEVICES\"\n])\npolicy.allow_expressions = True\n</code></pre>"},{"location":"security/#configuration-management-only","title":"Configuration Management Only","text":"<pre><code># No Python object creation, just configuration\npolicy = SecurityPolicy()\npolicy.allowed_imports.clear()  # No object instantiation\npolicy.allowed_env_vars.update([\"ENV\", \"DEBUG\", \"PORT\", \"HOST\"])\npolicy.allowed_include_paths.add(\"configs/**/*.yml\")\npolicy.allow_expressions = True\n</code></pre>"},{"location":"security/#completely-locked-down","title":"Completely Locked Down","text":"<pre><code># Maximum security - only basic config loading\npolicy = SecurityPolicy()\n# Everything remains empty - no imports, env vars, includes, or expressions\nconfig = load_config(\"config.yml\", security_policy=policy)\n</code></pre>"}]}