{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PYAMLO Documentation","text":"<p>Development Status</p> <p>PYAMLO is currently in development. The API is not stable and may change without notice.</p> <p>PYAMLO is an advanced YAML configuration loader for Python that supports file inclusion, deep merging, environment variable injection, variable interpolation, and direct object instantiation.</p>"},{"location":"#why-pyamlo","title":"Why PYAMLO?","text":"<ul> <li>Composable configs: Use <code>include!</code> to merge multiple YAML files</li> <li>Powerful merging: Deep merge, extend lists, or patch dictionaries  </li> <li>Environment aware: Inject environment variables with defaults</li> <li>Python objects: Instantiate classes and functions directly from YAML</li> <li>Variable interpolation: Reference config values, combine strings, and access object properties with <code>${...}</code></li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install pyamlo\n</code></pre> <p>config.yaml: <pre><code>app:\n  name: MyWebApp\n  port: 8080\n  host: web.local\ngreeting: Hello, ${app.name}!\ndatabase_url: postgres://${app.host}:${app.port}/maindb\n</code></pre></p> <p>Python: <pre><code>from pyamlo import load_config\n\nconfig = load_config(\"config.yaml\")\nprint(config['greeting'])      # Hello, MyWebApp!\nprint(config['database_url'])  # postgres://web.local:8080/maindb\n</code></pre></p>"},{"location":"best-practices/","title":"Best Practices","text":""},{"location":"best-practices/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Use <code>!patch</code> only when you need to completely replace a dictionary</li> <li>Use <code>!extend</code> only on lists to append items</li> <li>Always provide defaults for non-critical environment variables</li> <li>Use <code>${...}</code> for referencing both config values and object attributes</li> </ul>"},{"location":"best-practices/#environment-variables","title":"Environment Variables","text":"<p>Always provide meaningful defaults: <pre><code>db_url: !env {var: DATABASE_URL, default: \"sqlite:///default.db\"}\nlog_level: !env {var: LOG_LEVEL, default: \"INFO\"}\n</code></pre></p>"},{"location":"best-practices/#cli-overrides","title":"CLI Overrides","text":""},{"location":"best-practices/#namespace-your-arguments","title":"Namespace Your Arguments","text":"<p>Always use the <code>pyamlo.</code> prefix to avoid conflicts: <pre><code># Good\npython script.py pyamlo.app.name=MyApp --verbose\n\n# Bad - will be ignored\npython script.py app.name=MyApp --verbose\n</code></pre></p>"},{"location":"best-practices/#use-proper-yaml-syntax","title":"Use Proper YAML Syntax","text":"<p>Quote complex values and use valid YAML: <pre><code># Good\npython script.py 'pyamlo.items=!extend [4,5]' 'pyamlo.settings=!patch {\"debug\": true}'\n\n# Bad - invalid syntax\npython script.py pyamlo.items=!extend[4,5] pyamlo.settings=!patch{debug:true}\n</code></pre></p>"},{"location":"best-practices/#programmatic-vs-command-line-usage","title":"Programmatic vs Command Line Usage","text":"<p>Programmatic overrides: <pre><code>from pyamlo import load_config\n\n# Manual overrides for specific values\nconfig = load_config(\"config.yml\", overrides=[\n    \"pyamlo.app.debug=true\",\n    \"pyamlo.database.host=localhost\"\n])\n\n# Automatic CLI reading\nconfig = load_config(\"config.yml\", use_cli=True)\n\n# Combined approach\nconfig = load_config(\"config.yml\", \n    overrides=[\"pyamlo.app.name=MyApp\"],  # Always applied\n    use_cli=True  # Read additional overrides from command line\n)\n</code></pre></p> <p>Command line usage: <pre><code>python -m pyamlo config.yml pyamlo.app.debug=true pyamlo.database.host=localhost\n</code></pre></p>"},{"location":"best-practices/#processing-order","title":"Processing Order","text":"<ol> <li>File includes (<code>!include</code> directives)</li> <li>Config file values (loaded from YAML files)</li> <li>Manual overrides (via <code>overrides</code> parameter)</li> <li>CLI overrides (when <code>use_cli=True</code>)</li> </ol> <p>Manual and CLI overrides can be combined, with CLI overrides taking final precedence.</p>"},{"location":"examples/","title":"Examples","text":"<p>Quick examples of PYAMLO's core features. For a comprehensive real-world example, see the PyTorch Ignite Tutorial.</p>"},{"location":"examples/#basic-configuration","title":"Basic Configuration","text":"<pre><code>app:\n  name: MinimalApp\n  version: 1.0\n</code></pre>"},{"location":"examples/#file-inclusion","title":"File Inclusion","text":"<pre><code>include!:\n  - base.yaml\n  - override.yaml\n</code></pre>"},{"location":"examples/#positional-include","title":"Positional Include","text":"<p>Place file contents at specific positions:</p> <pre><code>app:\n  name: MyApp\nmiddleware: !include_at middleware.yml\ndatabase:\n  host: localhost\n</code></pre> <p>middleware.yml: <pre><code>middleware:\n  cache:\n    enabled: true\n    ttl: 3600\n  monitoring:\n    enabled: true\n    port: 9090\n</code></pre></p> <p>Result: <pre><code>app:\n  name: MyApp\nmiddleware:\n  cache:\n    enabled: true\n    ttl: 3600\n  monitoring:\n    enabled: true\n    port: 9090\ndatabase:\n  host: localhost\n</code></pre></p> <p>Key Validation</p> <p>Included files must contain keys matching the assignment target. Keys starting with underscore are always allowed as helper keys.</p>"},{"location":"examples/#dynamic-include-paths","title":"Dynamic Include Paths","text":"<pre><code>environment: production\nservice_type: api\nconfig: !include_at configs/${environment}/${service_type}.yml\n</code></pre>"},{"location":"examples/#environment-variables","title":"Environment Variables","text":"<pre><code>api_key: !env {var: API_KEY, default: \"not-set\"}\ndatabase_url: !env DATABASE_URL\n</code></pre>"},{"location":"examples/#python-integration","title":"Python Integration","text":"<pre><code># Import classes\ndatetime: !import datetime.datetime\n\n# Instantiate objects\nlog_path: !@pathlib.Path /var/log/myapp.log\ncurrent_time: !@pyamlo.call ${datetime.now}\n</code></pre>"},{"location":"examples/#advanced-features","title":"Advanced Features","text":""},{"location":"examples/#merging-strategies","title":"Merging Strategies","text":"<pre><code>include!:\n  - base.yaml\n\nusers:\n  admin: !patch \n    user: root\n    id: 1\n  guests: !extend [\"guest2\"]\n</code></pre> <p>base.yaml: <pre><code>users:\n  admin:\n    name: root\n    value: 1\n  guests: [\"guest1\"]\n</code></pre></p> <p>Result: <code>admin</code> becomes <code>{'user': 'root', 'id': 1}</code>, <code>guests</code> becomes <code>[\"guest1\", \"guest2\"]</code>.</p>"},{"location":"examples/#object-references","title":"Object References","text":"<pre><code># Create objects and reference them\nmain_db: !@mydb.Database\n  dsn: ${db_url}\n  pool_size: 10\n\nworker: !@myapp.Worker\n  db: ${main_db}\n\napp:\n  db_connection: ${main_db}\n  worker_instance: ${worker}\n</code></pre>"},{"location":"examples/#variable-interpolation","title":"Variable Interpolation","text":"<pre><code>pipeline:\n  preprocess: !@ml.PreprocessStep\n    name: preprocess\n  train: !@ml.TrainStep\n    name: train\n    inputs: ${pipeline.preprocess.outputs}\n  evaluate: !@ml.EvaluateStep\n    name: evaluate\n    inputs: ${pipeline.train.outputs}\n</code></pre>"},{"location":"examples/#configuration-overrides","title":"Configuration Overrides","text":""},{"location":"examples/#programmatic","title":"Programmatic","text":"<pre><code>from pyamlo import load_config\n\nconfig = load_config(\"config.yaml\", overrides=[\n    \"pyamlo.app.name=NewApp\",\n    \"pyamlo.database.host=localhost\"\n])\n</code></pre>"},{"location":"examples/#command-line","title":"Command Line","text":"<pre><code>python -m pyamlo config.yaml pyamlo.app.name=NewApp pyamlo.database.host=localhost\n</code></pre>"},{"location":"examples/#automatic-cli-reading","title":"Automatic CLI Reading","text":"<pre><code>from pyamlo import load_config\nconfig = load_config(\"config.yaml\", use_cli=True)\n</code></pre>"},{"location":"examples/#complete-example","title":"Complete Example","text":"<p>For a comprehensive example demonstrating PYAMLO's capabilities in a real machine learning project, see the PyTorch Ignite Tutorial. This example shows:</p> <ul> <li>Modular Configuration: Split complex ML pipelines into focused, reusable components</li> <li>Automatic Device Detection: Conditional CUDA/CPU configuration  </li> <li>Object Instantiation: Creating PyTorch models, optimizers, and training engines from YAML</li> <li>Variable Interpolation: Sharing objects and values across configuration files</li> <li>Advanced Patterns: Environment variables, conditional logic, and command-line overrides</li> </ul>"},{"location":"features/","title":"Features","text":"<p>PYAMLO enhances standard YAML loading with powerful features for complex configurations.</p>"},{"location":"features/#file-inclusion","title":"File Inclusion","text":""},{"location":"features/#standard-includes-include","title":"Standard Includes (<code>include!</code>)","text":"<p>Merge multiple configuration files with deep merging: <pre><code>include!:\n  - base.yaml\n  - environment.yaml\n</code></pre></p>"},{"location":"features/#positional-includes-include_at","title":"Positional Includes (<code>!include_at</code>)","text":"<p>Include files at specific positions, replacing the key with file contents:</p> <pre><code>app:\n  name: MyApp\nmiddleware: !include_at middleware.yml\ndatabase:\n  host: localhost\n</code></pre> <p>middleware.yml: <pre><code>middleware:\n  cache:\n    enabled: true\n    ttl: 3600\n  monitoring:\n    enabled: true\n    port: 9090\n</code></pre></p> <p>Result: <pre><code>app:\n  name: MyApp\nmiddleware:\n  cache:\n    enabled: true\n    ttl: 3600\n  monitoring:\n    enabled: true\n    port: 9090\ndatabase:\n  host: localhost\n</code></pre></p>"},{"location":"features/#key-validation","title":"Key Validation","text":"<p><code>!include_at</code> validates that included files contain only expected keys:</p> <pre><code># Single key - file must contain 'config' key\nconfig: !include_at config.yml\n\n# Multiple keys - file must contain 'train_loader' and 'val_loader' keys  \ntrain_loader, val_loader: !include_at loaders.yml\n</code></pre> <p>Keys starting with underscore (e.g., <code>_helper</code>) are always allowed.</p>"},{"location":"features/#dynamic-include-paths","title":"Dynamic Include Paths","text":"<p>Use variable interpolation in file paths: <pre><code>environment: production\nconfig: !include_at configs/${environment}/api.yml\n</code></pre></p>"},{"location":"features/#multiple-config-files","title":"Multiple Config Files","text":"<p>Load and merge multiple configuration files in order: <pre><code># Base config, then environment-specific, then user overrides\nconfig = load_config(['base.yaml', 'production.yaml', 'user-override.yaml'])\n</code></pre></p>"},{"location":"features/#merging-strategies","title":"Merging Strategies","text":"<ul> <li>Deep Merge: Recursively merges dictionaries (default)</li> <li>List Extension (<code>!extend</code>): Appends to existing lists</li> <li>Dictionary Replacement (<code>!patch</code>): Completely replaces dictionaries</li> </ul>"},{"location":"features/#environment-variables-env","title":"Environment Variables (<code>!env</code>)","text":"<p>Inject environment variables with optional defaults: <pre><code>api_key: !env {var: API_KEY, default: \"not-set\"}\ndatabase_url: !env DATABASE_URL\n</code></pre></p>"},{"location":"features/#python-integration","title":"Python Integration","text":""},{"location":"features/#module-import-import","title":"Module Import (<code>!import</code>)","text":"<p>Import Python modules, classes, or functions: <pre><code>datetime: !import datetime.datetime\npathlib: !import pathlib.Path\n</code></pre></p>"},{"location":"features/#object-instantiation","title":"Object Instantiation (<code>!@</code>)","text":"<p>Create Python objects directly from YAML: <pre><code>log_path: !@pathlib.Path /var/log/app.log\ndatabase: !@psycopg2.connect\n  host: localhost\n  port: 5432\n</code></pre></p>"},{"location":"features/#variable-interpolation","title":"Variable Interpolation (<code>${...}</code>)","text":"<p>Reference other config values and perform calculations within YAML.</p>"},{"location":"features/#basic-references","title":"Basic References","text":"<pre><code>app:\n  name: MyApp\n  version: 1.0\n  title: ${app.name} v${app.version}  # \"MyApp v1.0\"\n</code></pre>"},{"location":"features/#mathematical-expressions","title":"Mathematical Expressions","text":"<pre><code>server:\n  workers: 4\n  connections_per_worker: 100\n  max_connections: ${server.workers * server.connections_per_worker}  # 400\n\npricing:\n  base_price: 10.0\n  tax_rate: 0.21\n  total: ${pricing.base_price * (1 + pricing.tax_rate)}  # 12.1\n</code></pre>"},{"location":"features/#conditional-logic","title":"Conditional Logic","text":"<pre><code>app:\n  env: production\n  debug: ${app.env == 'development'}  # false\n\ndatabase:\n  pool_size: ${50 if app.env == 'production' else 10}\n  host: ${'prod.db.com' if app.env == 'production' else 'localhost'}\n\nfeatures:\n  enable_cache: ${app.env in ['production', 'staging']}\n  rate_limiting: ${app.env == 'production' or app.env == 'staging'}\n</code></pre>"},{"location":"features/#object-property-access","title":"Object Property Access","text":"<pre><code>database: !@psycopg2.connect\n  host: localhost\n  port: 5432\n\nconnection_info: ${database.host}:${database.port}  # \"localhost:5432\"\n</code></pre>"},{"location":"features/#bitwise-operations","title":"Bitwise Operations","text":"<pre><code>permissions:\n  read: 4    # Binary: 100\n  write: 2   # Binary: 010\n  execute: 1 # Binary: 001\n\n  full_access: ${permissions.read | permissions.write | permissions.execute}  # 7\n  can_read: ${permissions.full_access &amp; permissions.read}  # 4 (truthy)\n  no_write: ${permissions.full_access &amp; ~permissions.write}  # 5\n</code></pre> <p>Supported Operations: - Math: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code> - Bitwise: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code> - Comparison: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>in</code> - Logical: <code>and</code>, <code>or</code>, <code>not</code> - Ternary: <code>value_if_true if condition else value_if_false</code> - Ternary: <code>value_if_true if condition else value_if_false</code></p>"},{"location":"features/#cli-overrides","title":"CLI Overrides","text":"<p>Override configuration values via command line using the <code>pyamlo.</code> prefix:</p> <pre><code># Single config with overrides\npython -m pyamlo config.yml pyamlo.app.name=MyApp pyamlo.database.host=localhost\n\n# Multiple configs with overrides\npython -m pyamlo base.yml production.yml pyamlo.debug=true pyamlo.database.pool_size=20\n\n# Special tags in overrides\npython -m pyamlo config.yml 'pyamlo.items=!extend [4,5]' 'pyamlo.settings=!patch {\"debug\": true}'\n</code></pre> <p>Programmatic usage: <pre><code>from pyamlo import load_config\n\n# Manual overrides\nconfig = load_config(\"config.yml\", overrides=[\"pyamlo.app.name=MyApp\"])\n\n# Automatic CLI reading\nconfig = load_config(\"config.yml\", use_cli=True)\n\n# Combined approach\nconfig = load_config(\"config.yml\", \n    overrides=[\"pyamlo.app.name=MyApp\"],  # Manual\n    use_cli=True  # Also read from sys.argv\n)\n</code></pre></p> <p>Processing Order: 1. Include processing (per file) 2. Config file merging (left to right) 3. Manual overrides (via <code>overrides</code> parameter) 4. CLI overrides (via <code>use_cli=True</code>) 5. Variable resolution and object instantiation</p>"},{"location":"pytorch-ignite/","title":"PyTorch Ignite with PYAMLO","text":"<p>This guide demonstrates using PyTorch Ignite with PYAMLO for MNIST digit classification, showcasing both monolithic and modular configuration approaches.</p>"},{"location":"pytorch-ignite/#overview","title":"Overview","text":"<p>The PyTorch Ignite example demonstrates how PYAMLO manages complex ML training pipelines through declarative YAML configuration, providing:</p> <ul> <li>Reproducibility: Complete training configuration in version-controlled files</li> <li>Modularity: Split complex configurations into focused, reusable components</li> <li>Flexibility: Easy experimentation with different architectures and hyperparameters</li> <li>Clarity: Human-readable configuration documenting the entire training process</li> </ul>"},{"location":"pytorch-ignite/#quick-start","title":"Quick Start","text":""},{"location":"pytorch-ignite/#prerequisites","title":"Prerequisites","text":"<pre><code>pip install -e .[ml]  # Install PYAMLO with ML dependencies\n</code></pre>"},{"location":"pytorch-ignite/#run-examples","title":"Run Examples","text":"<pre><code>cd examples/ignite\n\n# Monolithic approach - everything in one file\npython -m pyamlo run_monolithic.yml\n\n# Modular approach - split into focused components\npython -m pyamlo run_modular.yml\n</code></pre> <p>Both configurations will: 1. Download MNIST dataset (if not present) 2. Train a CNN model for 1 epoch 3. Evaluate on test set 4. Display training progress and final accuracy</p> <p>First Run</p> <p>The first run downloads the MNIST dataset (~9.9 MB), which may take a few moments.</p>"},{"location":"pytorch-ignite/#configuration-approaches","title":"Configuration Approaches","text":""},{"location":"pytorch-ignite/#file-structure","title":"File Structure","text":"<pre><code>examples/ignite/\n\u251c\u2500\u2500 run_modular.yml     # Main orchestration file\n\u251c\u2500\u2500 run_monolithic.yml  # Everything in one file\n\u251c\u2500\u2500 devices/\n\u2502   \u2514\u2500\u2500 auto.yml        # Device detection\n\u251c\u2500\u2500 datasets/\n\u2502   \u2514\u2500\u2500 mnist.yml       # Data pipeline\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 selector.yml    # Dynamic model selection\n\u2502   \u2514\u2500\u2500 architectures/  # Individual model definitions\n\u251c\u2500\u2500 trainers/\n\u2502   \u2514\u2500\u2500 supervised.yml  # Training engine\n\u2514\u2500\u2500 evaluators/\n    \u2514\u2500\u2500 supervised.yml  # Evaluation metrics\n</code></pre>"},{"location":"pytorch-ignite/#monolithic-configuration","title":"Monolithic Configuration","text":"<p>Perfect for quick prototyping and simple experiments - everything in <code>run_monolithic.yml</code>.</p>"},{"location":"pytorch-ignite/#modular-configuration","title":"Modular Configuration","text":"<p>Organized into logical directories with focused files, providing: - Better Organization: Related configs grouped together - Easier Maintenance: Changes isolated to specific components - Reusability: Components shared across experiments - Scalability: Easy to add new models/datasets without clutter</p>"},{"location":"pytorch-ignite/#key-components","title":"Key Components","text":""},{"location":"pytorch-ignite/#1-device-configuration-devicesautoyml","title":"1. Device Configuration (<code>devices/auto.yml</code>)","text":"<p>Automatically detects and configures the appropriate device: <pre><code>cuda: !@torch.cuda.is_available\ndevice: !@torch.device\n  type: \"${'cuda' if cuda else 'cpu'}\"\ndevice_msg: !@print \"Using device: ${device.type}\"\n</code></pre></p>"},{"location":"pytorch-ignite/#2-data-pipeline-datasetsmnistyml","title":"2. Data Pipeline (<code>datasets/mnist.yml</code>)","text":"<pre><code>transform: !@torchvision.transforms.Compose\n  transforms:\n    - !@torchvision.transforms.ToTensor\n    - !@torchvision.transforms.Normalize\n      mean: [0.1307]\n      std: [0.3081]\n\ntrain_dataset: !@torchvision.datasets.MNIST\n  root: './data'\n  train: true\n  download: true\n  transform: ${transform}\n\ntrain_loader: !@torch.utils.data.DataLoader\n  dataset: ${train_dataset}\n  batch_size: 64\n  shuffle: true\n</code></pre>"},{"location":"pytorch-ignite/#3-model-selection-modelsselectoryml","title":"3. Model Selection (<code>models/selector.yml</code>)","text":"<p>Dynamically selects model architecture: <pre><code>model_name: cnn  # Default model\n_model: !include ./architectures/${model_name}.yml\nmodel: ${_model.architecture}\n_model_device_setup: !@pyamlo.call\n  calling: ${model.to}\n  device: ${device}\n</code></pre></p>"},{"location":"pytorch-ignite/#4-training-setup-trainerssupervisedyml","title":"4. Training Setup (<code>trainers/supervised.yml</code>)","text":"<pre><code>criterion: !@torch.nn.CrossEntropyLoss\noptimizer: !@torch.optim.Adam\n  params: !@pyamlo.call ${model.parameters}\n  lr: 0.001\n\ntrainer: !@ignite.engine.create_supervised_trainer\n  model: ${model}\n  optimizer: ${optimizer}\n  loss_fn: ${criterion}\n  device: ${device}\n\npbar: !@ignite.handlers.ProgressBar\n  persist: true\n\nattach_pbar: !@pyamlo.call\n  calling: ${pbar.attach}\n  engine: ${trainer}\n</code></pre>"},{"location":"pytorch-ignite/#5-evaluation-setup-evaluatorssupervisedyml","title":"5. Evaluation Setup (<code>evaluators/supervised.yml</code>)","text":"<pre><code>metrics:\n  accuracy: !@ignite.metrics.Accuracy\n  loss: !@ignite.metrics.Loss\n    loss_fn: ${criterion}\n  precision: !@ignite.metrics.Precision\n  recall: !@ignite.metrics.Recall\n\nevaluator: !@ignite.engine.create_supervised_evaluator\n  model: ${model}\n  metrics: ${metrics}\n  device: ${device}\n</code></pre>"},{"location":"pytorch-ignite/#6-main-orchestration-run_modularyml","title":"6. Main Orchestration (<code>run_modular.yml</code>)","text":"<pre><code>include!:\n  - ./devices/auto.yml \n  - ./datasets/mnist.yml\n  - ./models/selector.yml\n  - ./trainers/supervised.yml\n  - ./evaluators/supervised.yml\n\nepochs: 1\ntrain_result: !@pyamlo.call\n  calling: ${trainer.run}\n  data: ${train_loader}\n  max_epochs: ${epochs}\n\neval_result: !@pyamlo.call\n  calling: ${evaluator.run}\n  data: ${val_loader}\n\nresults_msg: !@pprint.pprint ${evaluator.state.metrics}\n</code></pre>"},{"location":"pytorch-ignite/#model-architecture","title":"Model Architecture","text":"<p>The CNN model consists of: 1. First Conv Block: Conv2d(1\u219232) \u2192 ReLU \u2192 MaxPool2d 2. Second Conv Block: Conv2d(32\u219264) \u2192 ReLU \u2192 MaxPool2d 3. Classifier: Flatten \u2192 Linear(3136\u2192128) \u2192 ReLU \u2192 Dropout(0.5) \u2192 Linear(128\u219210)</p> <p>Input: 28\u00d728 grayscale images | Output: 10-class probability distribution</p>"},{"location":"pytorch-ignite/#expected-results","title":"Expected Results","text":"<pre><code>Using device: cuda\nIteration: [938/938] 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| [00:20&lt;00:00]\nTraining completed!\nEvaluation completed! {'accuracy': 0.9868, 'loss': 0.040337673950195316}\n</code></pre>"},{"location":"pytorch-ignite/#customization-examples","title":"Customization Examples","text":""},{"location":"pytorch-ignite/#training-parameters","title":"Training Parameters","text":"<p>Change optimizer in <code>trainers/supervised.yml</code>: <pre><code>optimizer: !@torch.optim.SGD\n  params: !@pyamlo.call ${model.parameters}\n  lr: 0.01\n  momentum: 0.9\n</code></pre></p> <p>Change training duration in <code>run_modular.yml</code>: <pre><code>epochs: 5\n</code></pre></p>"},{"location":"pytorch-ignite/#device-selection","title":"Device Selection","text":"<p>Force specific device in <code>devices/auto.yml</code>: <pre><code>device: !@torch.device\n  type: \"cpu\"  # or \"cuda\" or \"mps\"\n</code></pre></p>"},{"location":"pytorch-ignite/#additional-metrics","title":"Additional Metrics","text":"<p>Extend evaluator in <code>evaluators/supervised.yml</code>: <pre><code>metrics:\n  accuracy: !@ignite.metrics.Accuracy\n  loss: !@ignite.metrics.Loss\n    loss_fn: ${criterion}\n  f1: !@ignite.metrics.Fbeta\n    beta: 1\n</code></pre></p>"},{"location":"pytorch-ignite/#command-line-overrides","title":"Command Line Overrides","text":"<pre><code>python -m pyamlo run_modular.yml pyamlo.lr=0.01 pyamlo.epochs=5\npython -m pyamlo run_modular.yml 'pyamlo.model_name=resnet'\n</code></pre>"},{"location":"pytorch-ignite/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"pytorch-ignite/#dynamic-model-selection","title":"Dynamic Model Selection","text":"<p>Switch between models using CLI overrides: <pre><code># Use default CNN model\npython -m pyamlo run_modular.yml\n\n# Switch to ResNet model  \npython -m pyamlo run_modular.yml 'pyamlo.model_name=resnet'\n</code></pre></p>"},{"location":"pytorch-ignite/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code>learning_rate: !env {var: LEARNING_RATE, default: 0.001}\nbatch_size: !env {var: BATCH_SIZE, default: 64}\nnum_epochs: !env {var: NUM_EPOCHS, default: 1}\n</code></pre>"},{"location":"pytorch-ignite/#conditional-configuration","title":"Conditional Configuration","text":"<pre><code>is_cuda_available: !@torch.cuda.is_available\ndevice_type: \"${'cuda' if is_cuda_available else 'cpu'}\"\nbatch_size: \"${128 if is_cuda_available else 32}\"\n</code></pre>"},{"location":"pytorch-ignite/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple: Begin with monolithic configuration to understand the flow</li> <li>Split Gradually: Move to modular configuration as complexity grows</li> <li>Name Meaningfully: Use descriptive names for configuration keys</li> <li>Version Control: Keep configurations alongside code</li> <li>Test Configurations: Validate before long training runs</li> </ol> <p>This example demonstrates PYAMLO's power for ML configuration management, scaling from simple prototypes to complex pipelines while maintaining readability and maintainability.</p>"}]}