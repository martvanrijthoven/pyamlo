{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PYAMLO Documentation","text":"<p>Development Status</p> <p>PYAMLO is currently in development. The API is not stable and may change without notice.</p> <p>Welcome to the official documentation for PYAMLO.</p> <p>PYAMLO is a  YAML configuration loader for Python, designed for advanced configuration scenarios. It supports file inclusion, deep merging, environment variable injection, variable interpolation, and direct object instantiation.</p>"},{"location":"#why-pyamlo","title":"Why PYAMLO?","text":"<ul> <li>Composable configs: Use <code>include!</code> to merge multiple YAML files.</li> <li>Powerful merging: Deep merge, extend lists, or patch dicts.</li> <li>Environment aware: Inject environment variables and use defaults.</li> <li>Python objects: Instantiate classes/functions directly from YAML</li> <li>Interpolation: <ul> <li>Variables: Use <code>${var}</code> to reference other config values.</li> <li>Strings: Use <code>${var}_my_string</code> to reference other config values combined with strings.</li> <li>Instances: Use <code>${object.property}</code> to reference instantiated objects and their properties.</li> </ul> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install pyamlo\n</code></pre> <p>Given a simple YAML file <code>config.yaml</code>:</p> <pre><code>app:\n  name: MyWebApp\n  port: 8080\n  host: web.local\ngreeting: Hello, ${app.name}!\ndatabase_url: postgres://${app.host}:${app.port}/maindb\n</code></pre> <p>You can load and resolve it using PYAMLO:</p> <pre><code>from pyamlo import load_config\nwith open(\"config.yaml\") as f:\n    config = load_config(f)\nprint(config['greeting'])  # Hello, MyWebApp!\nprint(config['database_url'])  # postgres://web.local:8080/maindb\n</code></pre>"},{"location":"best-practices/","title":"Best Practices","text":""},{"location":"best-practices/#using-environment-variables","title":"Using Environment Variables","text":"<ul> <li>Always provide a default for non-critical env vars:   <pre><code>db_url: !env {var: DATABASE_URL, default: \"sqlite:///default.db\"}\n</code></pre></li> </ul>"},{"location":"best-practices/#avoiding-common-pitfalls","title":"Avoiding Common Pitfalls","text":"<ul> <li>Do not use <code>!patch</code> unless you want to fully replace a dictionary.</li> <li>Use <code>!extend</code> only on lists.</li> <li>Use <code>${...}</code> for referencing both config values and object attributes.</li> </ul>"},{"location":"best-practices/#testing-configs","title":"Testing Configs","text":"<ul> <li>Use PYAMLO in your test suite to validate all config files load and resolve as expected.</li> <li>Example pytest:   <pre><code>import pytest\nfrom pyamlo import load_config\n@pytest.mark.parametrize(\"fname\", [\"prod.yaml\", \"dev.yaml\"])\ndef test_config_loads(fname):\n    with open(fname) as f:\n        cfg, _ = load_config(f)\n    assert \"app\" in cfg\n</code></pre></li> </ul>"},{"location":"best-practices/#cli-overrides-best-practices","title":"CLI Overrides Best Practices","text":""},{"location":"best-practices/#namespace-your-arguments","title":"Namespace Your Arguments","text":"<ul> <li>Always use the <code>pyamlo.</code> prefix for PYAMLO config overrides</li> <li>This avoids conflicts with other CLI arguments <pre><code># Good\npython script.py pyamlo.app.name=MyApp --verbose\n\n# Bad - no pyamlo prefix, will be ignored\npython script.py app.name=MyApp --verbose\n</code></pre></li> </ul>"},{"location":"best-practices/#use-proper-yaml-syntax-in-values","title":"Use Proper YAML Syntax in Values","text":"<ul> <li>Use single quotes for values containing spaces or special characters</li> <li>Use valid YAML for !extend and !patch values <pre><code># Good\npython script.py 'pyamlo.items=!extend [4,5]' 'pyamlo.settings=!patch {\"debug\": true}'\n\n# Bad - invalid YAML syntax\npython script.py pyamlo.items=!extend[4,5] pyamlo.settings=!patch{debug:true}\n</code></pre></li> </ul>"},{"location":"best-practices/#order-of-precedence","title":"Order of Precedence","text":"<ol> <li>Included file values (!include)</li> <li>Config file values (loaded from YAML files)</li> <li>CLI overrides (pyamlo.*)</li> </ol> <p>This means CLI overrides always take precedence over file-based configuration.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#minimal-example","title":"Minimal Example","text":"<pre><code>app:\n  name: MinimalApp\n  version: 1.0\n</code></pre>"},{"location":"examples/#multi-file-include","title":"Multi-file Include","text":"<pre><code>include!:\n  - base.yaml\n  - override.yaml\n</code></pre>"},{"location":"examples/#environment-variable-with-default","title":"Environment Variable with Default","text":"<pre><code>api_key: !env {var: API_KEY, default: \"not-set\"}\n</code></pre>"},{"location":"examples/#python-module-import","title":"Python Module Import","text":"<pre><code># Import a class\ndatetime: !import datetime.datetime\n\n# use the imported class\ncurrent_time: !@pyamlo.call ${datetime.now}\n</code></pre>"},{"location":"examples/#python-object-instantiation","title":"Python Object Instantiation","text":"<pre><code>log_path: !@pathlib.Path /var/log/myapp.log\n</code></pre>"},{"location":"examples/#advanced-usage","title":"Advanced Usage","text":"<p>.</p>"},{"location":"examples/#deep-merging-dict-patching-and-list-extension","title":"Deep Merging, Dict Patching and List Extension","text":"<p><pre><code>include!:\n  - base.yaml\n\nusers:\n  admin: !patch \n    user: root\n    id: 1\n  guests: !extend [\"guest2\"]\n</code></pre> Where <code>base.yaml</code> contains: <pre><code>users:\n  admin:\n    name: root\n    value: 1\n  guests: [\"guest1\"]\n</code></pre> Result: <code>admin</code> is <code>{'user': 'root', 'id': 1}</code>, <code>guests</code> is <code>[\"guest1\", \"guest2\"]</code>.</p>"},{"location":"examples/#python-object-instantiation_1","title":"Python Object Instantiation","text":"<p><pre><code>main_db: !@mydb.Database\n  dsn: ${db_url}\n  pool_size: 10\n\nworker: !@myapp.Worker\n  db: ${main_db}\n</code></pre> Reference the actual Python object via <code>${main_db}</code> elsewhere in the config.</p>"},{"location":"examples/#advanced-variable-interpolation","title":"Advanced Variable Interpolation","text":"<p>Note</p> <p>The <code>ml</code> module used in this example is fictional and used for demonstration purposes only. It illustrates how you might structure a machine learning pipeline configuration using PYAMLO's variable interpolation features.</p> <pre><code>pipeline:\n  preprocess: !@ml.PreprocessStep\n    name: preprocess\n  train: !@ml.TrainStep\n    name: train\n    inputs: ${pipeline.preprocess.outputs}\n  evaluate: !@ml.EvaluateStep\n    name: evaluate\n    inputs: ${pipeline.train.outputs}\n</code></pre>"},{"location":"examples/#cli-usage","title":"CLI Usage","text":""},{"location":"examples/#basic-config","title":"Basic Config","text":"<pre><code># base.yml\napp:\n  name: MyApp\n  debug: false\nitems: [1, 2, 3]\n\n# overrides.yml\napp:\n  debug: true\nitems: !extend [4, 5]\n</code></pre> <pre><code># Load single config\npython -m pyamlo config.yml\n\n# Load multiple configs (later files override earlier ones)\npython -m pyamlo base.yml overrides.yml\n\n# Override values with CLI args\npython -m pyamlo base.yml overrides.yml pyamlo.app.debug=true\n\n# Extend lists\npython -m pyamlo config.yml 'pyamlo.items=!extend [4,5]'\n\n# Mix with other CLI arguments (others are ignored)\npython -m pyamlo config.yml --verbose pyamlo.app.name=NewApp\n])\n</code></pre>"},{"location":"features/","title":"Features","text":"<p>PYAMLO enhances standard YAML loading with several powerful features designed to handle complex configurations.</p>"},{"location":"features/#includes-include","title":"Includes (<code>include!</code>)","text":"<ul> <li>Structure your configuration across multiple files using the <code>include!</code> key.</li> <li>Files are deep-merged in order, with later files overriding earlier ones.</li> </ul>"},{"location":"features/#multiple-config-files","title":"Multiple Config Files","text":"<ul> <li>Load and merge multiple configuration files in a single call.</li> <li>Each file processes <code>!include</code> directives independently relative to its own location.</li> <li>Files are merged in order with later files overriding earlier ones.</li> <li>Perfect for environment-specific overrides, user customizations, and modular configurations.</li> </ul> <pre><code># Load base config, then environment-specific, then user overrides\nconfig = load_config(['base.yaml', 'production.yaml', 'user-override.yaml'])\n</code></pre>"},{"location":"features/#merging-strategies","title":"Merging Strategies","text":"<ul> <li>Deep Merge: Recursively merges dictionaries.</li> <li>List Extension (<code>!extend</code>): Appends to lists.</li> <li>Dictionary Replacement (<code>!patch</code>): Replaces dictionaries.</li> </ul>"},{"location":"features/#environment-variables-env","title":"Environment Variables (<code>!env</code>)","text":"<ul> <li>Inject environment variables directly into your config.</li> <li>Supports default values: <code>!env {var: NAME, default: ...}</code></li> </ul>"},{"location":"features/#python-module-import-import","title":"Python Module Import (<code>!import</code>)","text":"<ul> <li>Import Python modules, classes, or functions without instantiation.</li> </ul>"},{"location":"features/#python-object-instantiation","title":"Python Object Instantiation (<code>!@</code>)","text":"<ul> <li>Instantiate Python classes or call functions directly from YAML.</li> <li>Supports positional, keyword, and scalar arguments.</li> </ul>"},{"location":"features/#variable-interpolation","title":"Variable Interpolation (<code>${...}</code>)","text":"<ul> <li>Reference other config values, including instantiated objects and their properties.</li> </ul>"},{"location":"features/#cli-overrides","title":"CLI Overrides","text":"<p>Override configuration values via command-line arguments using the <code>pyamlo.</code> prefix:</p> <pre><code># Single config with overrides\npython -m pyamlo config.yml pyamlo.app.name=MyApp pyamlo.database.host=localhost\n\n# Multiple configs with overrides (configs are merged first, then overrides applied)\npython -m pyamlo base.yml production.yml pyamlo.debug=true pyamlo.database.pool_size=20\n\n# Use with special tags\npython -m pyamlo config.yml 'pyamlo.items=!extend [4,5]' 'pyamlo.settings=!patch {\"debug\": true}'\n</code></pre>"},{"location":"features/#order-of-operations","title":"Order of Operations","text":"<ol> <li>Include Processing: Each config file processes its own <code>!include</code> directives</li> <li>Config Merging: Multiple config files are merged in order (left to right)</li> <li>CLI Overrides: Command-line overrides are applied last</li> <li>Resolution: Variable interpolation and object instantiation occur</li> </ol> <p>CLI overrides support all YAML features and take precedence over file-based configuration.</p>"}]}