{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yamlo Documentation","text":"<p>Welcome to the official documentation for yamlo.</p> <p>Yamlo is a flexible YAML configuration loader for Python, designed for advanced configuration scenarios. It supports file inclusion, deep merging, environment variable injection, variable interpolation, and direct Python object instantiation from YAML.</p>"},{"location":"#why-yamlo","title":"Why Yamlo?","text":"<ul> <li>Composable configs: Use <code>_includes</code> to merge multiple YAML files.</li> <li>Powerful merging: Deep merge, extend lists, or patch dicts.</li> <li>Environment aware: Inject environment variables and use defaults.</li> <li>Python objects: Instantiate classes/functions directly from YAML</li> <li>Interpolation: <ul> <li>Variables: Use <code>${var}</code> to reference other config values.</li> <li>Strings: Use <code>${var}_my_string</code> to reference other config values combined with strings.</li> <li>Instances: Use <code>${object.property}</code> to reference instantiated objects and their properties.</li> </ul> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install yamlo\n# or, for development\nuv pip install .[test,docs]\n</code></pre> <p>Given a simple YAML file <code>config.yaml</code>:</p> <pre><code>app:\n  name: MyWebApp\n  port: 8080\n  host: web.local\ngreeting: Hello, ${app.name}!\ndatabase_url: postgres://${app.host}:${app.port}/maindb\n</code></pre> <p>You can load and resolve it using yamlo:</p> <pre><code>from yamlo import load_config\nwith open(\"config.yaml\") as f:\n    config, instances = load_config(f)\nprint(config['greeting'])  # Hello, MyWebApp!\nprint(config['database_url'])  # postgres://web.local:8080/maindb\n</code></pre>"},{"location":"best-practices/","title":"Best Practices","text":""},{"location":"best-practices/#using-environment-variables","title":"Using Environment Variables","text":"<ul> <li>Always provide a default for non-critical env vars:   <pre><code>db_url: !env {var: DATABASE_URL, default: \"sqlite:///default.db\"}\n</code></pre></li> </ul>"},{"location":"best-practices/#avoiding-common-pitfalls","title":"Avoiding Common Pitfalls","text":"<ul> <li>Do not use <code>!patch</code> unless you want to fully replace a dictionary.</li> <li>Use <code>!extend</code> only on lists.</li> <li>Use <code>${...}</code> for referencing both config values and object attributes.</li> </ul>"},{"location":"best-practices/#testing-configs","title":"Testing Configs","text":"<ul> <li>Use yamlo in your test suite to validate all config files load and resolve as expected.</li> <li>Example pytest:   <pre><code>import pytest\nfrom yamlo import load_config\n@pytest.mark.parametrize(\"fname\", [\"prod.yaml\", \"dev.yaml\"])\ndef test_config_loads(fname):\n    with open(fname) as f:\n        cfg, _ = load_config(f)\n    assert \"app\" in cfg\n</code></pre></li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#minimal-example","title":"Minimal Example","text":"<pre><code>app:\n  name: MinimalApp\n  version: 1.0\n</code></pre>"},{"location":"examples/#multi-file-include","title":"Multi-file Include","text":"<pre><code>_includes:\n  - base.yaml\n  - override.yaml\n</code></pre>"},{"location":"examples/#environment-variable-with-default","title":"Environment Variable with Default","text":"<pre><code>api_key: !env {var: API_KEY, default: \"not-set\"}\n</code></pre>"},{"location":"examples/#python-object-instantiation","title":"Python Object Instantiation","text":"<pre><code>log_path: !@pathlib.Path /var/log/myapp.log\n</code></pre> <p>Parameters: - <code>stream</code>: A file-like object (e.g., from <code>open('config.yaml')</code>).</p> <p>Returns: - <code>config</code>: The fully resolved configuration dictionary. - <code>instances</code>: A dictionary of Python objects instantiated via <code>!@</code> tags (internal tracking, not user-facing).</p> <p>Basic Example: <pre><code>from yamlo import load_config\nwith open('examples/test_config.yaml') as f:\n    config, instances = load_config(f)\n</code></pre></p>"},{"location":"examples/#advanced-usage","title":"Advanced Usage","text":""},{"location":"examples/#dynamic-includes-and-environment-driven-configs","title":"Dynamic Includes and Environment-Driven Configs","text":"<p><pre><code>_includes:\n  - base.yaml\n  - !env {var: EXTRA_CONFIG, default: 'optional.yaml'}\n</code></pre> Dynamically include files based on environment variables.</p>"},{"location":"examples/#deep-merging-list-extension-and-patching","title":"Deep Merging, List Extension, and Patching","text":"<p><pre><code>users:\n  admins: [\"root\"]\n  guests: [\"guest1\"]\n\n_includes:\n  - override.yaml\n</code></pre> Where <code>override.yaml</code> contains: <pre><code>users:\n  admins: !extend [\"admin1\", \"admin2\"]\n  guests: !patch [\"guest2\"]\n</code></pre> Result: <code>admins</code> is <code>[\"root\", \"admin1\", \"admin2\"]</code>, <code>guests</code> is <code>[\"guest2\"]</code>.</p>"},{"location":"examples/#python-object-instantiation_1","title":"Python Object Instantiation","text":"<p><pre><code>main_db: !@mydb.Database\n  dsn: ${db_url}\n  pool_size: 10\n\nworker: !@myapp.Worker\n  db: ${main_db}\n</code></pre> Reference the actual Python object via <code>${main_db}</code> elsewhere in the config.</p>"},{"location":"examples/#function-calls-and-attribute-interpolation","title":"Function Calls and Attribute Interpolation","text":"<p><pre><code>now: !@datetime.datetime.now\n\nlog_path: !@pathlib.Path\n  - /logs\n  - ${now.year}\n  - ${now.month}\n  - app.log\n</code></pre> Creates a log path with the current year and month.</p>"},{"location":"examples/#advanced-variable-interpolation","title":"Advanced Variable Interpolation","text":"<p>Supports nested and attribute-based interpolation: <pre><code>pipeline:\n  step1: !@myapp.Step\n    name: preprocess\n  step2: !@myapp.Step\n    name: train\n    depends_on: ${pipeline.step1}\n  step3: !@myapp.Step\n    name: evaluate\n    depends_on: ${pipeline.train}\n</code></pre></p>"},{"location":"examples/#full-example-ml-pipeline","title":"Full Example: ML Pipeline","text":"<pre><code>_includes:\n  - base.yaml\n  - !env {var: EXTRA_CONFIG, default: 'ml_override.yaml'}\n\nexperiment:\n  name: \"exp1\"\n  started: !@datetime.datetime.now\n\npaths:\n  root: !@pathlib.Path /mnt/data/${experiment.name}\n  logs: !@pathlib.Path ${paths.root}/logs\n\nmodel:\n  type: resnet50\n  weights: !env {var: MODEL_WEIGHTS, default: null}\n\ntrain:\n  dataset: !@myml.load_dataset\n    path: ${paths.root}/train\n    batch_size: 32\n  optimizer: !@torch.optim.Adam\n    lr: 0.001\n  epochs: 10\n\ncallbacks:\n  - !@myml.EarlyStopping\n      patience: 5\n  - !@myml.ModelCheckpoint\n      path: ${paths.logs}/best.pt\n</code></pre>"},{"location":"features/","title":"Features","text":"<p>Yamlo enhances standard YAML loading with several powerful features designed to handle complex configurations.</p>"},{"location":"features/#includes-_includes","title":"Includes (<code>_includes</code>)","text":"<ul> <li>Structure your configuration across multiple files using the <code>_includes</code> key.</li> <li>Files are deep-merged in order, with later files overriding earlier ones.</li> </ul>"},{"location":"features/#merging-strategies","title":"Merging Strategies","text":"<ul> <li>Deep Merge: Recursively merges dictionaries.</li> <li>List Extension (<code>!extend</code>): Appends to lists.</li> <li>Dictionary Replacement (<code>!patch</code>): Replaces dictionaries.</li> </ul>"},{"location":"features/#environment-variables-env","title":"Environment Variables (<code>!env</code>)","text":"<ul> <li>Inject environment variables directly into your config.</li> <li>Supports default values: <code>!env {var: NAME, default: ...}</code></li> </ul>"},{"location":"features/#python-object-instantiation","title":"Python Object Instantiation (<code>!@</code>)","text":"<ul> <li>Instantiate Python classes or call functions directly from YAML.</li> <li>Supports positional, keyword, and scalar arguments.</li> </ul>"},{"location":"features/#variable-interpolation","title":"Variable Interpolation (<code>${...}</code>)","text":"<ul> <li>Reference other config values, including instantiated objects and their properties.</li> </ul>"}]}